name: Analysis, Tests and Docker image
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  backend:
    name: Backend
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Improved depth for better code analysis

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'

    - name: Build and test with Maven
      run: mvn clean test
      working-directory: ./back

    - name: Upload Jacoco report
      uses: actions/upload-artifact@v4
      with:
        name: backend-test-coverage
        path: ./back/target/site/jacoco/

   # - name: Backend SonarCloud Scan
   #   working-directory: ./back
   #   env:
   #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
   #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
   #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
   #   run: |
   #     mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
   #     -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
   #     -Dsonar.java.coveragePlugin=jacoco \
   #     -Dsonar.coverage.exclusions=**/config/**,**/dto/**,**/model/**

  #frontend:
    #- name: Frontend
     # runs-on: ubuntu-latest
   # steps:
   # - uses: actions/checkout@v4
    #  with:
     #   fetch-depth: 0

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
          node-version: 18
    - name: Install dependencies for frontend
      working-directory: front
      run: yarn install
      
    - name: Run tests for frontend
      working-directory: front
      
      run:  npm test -- --watch=false --browsers=ChromeHeadless --code-coverage
    - name: Debug frontend coverage directory
      working-directory: front/coverage/bobapp
      run: ls -l

    - name: Verify frontend coverage report
      working-directory: front/coverage/bobapp
      run: ls -l lcov.info

    - name: Run SonarScanner with Docker
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: https://sonarcloud.io
      run: |
        docker run --rm \
        -e SONAR_HOST_URL=https://sonarcloud.io \
        -e SONAR_TOKEN=${{ secrets.SONAR_TOKEN }} \
        -v $(pwd):/usr/src \
        sonarsource/sonar-scanner-cli \
        sonar-scanner \
        -Dsonar.projectKey=romain-25_Gerez-un-projet-collaboratif-en-int-grant-une-demarche-CI-CD \
        -Dsonar.sources=src


      
    - name: Frontend SonarCloud Scan
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: https://sonarcloud.io
      run: |
          # Analyse Backend (Java)
          cd back
          mvn clean verify
          sonar-scanner \
            -Dsonar.projectKey=romain-25_Gerez-un-projet-collaboratif-en-int-grant-une-demarche-CI-CD \
            -Dsonar.sources=src/main/java \
            -Dsonar.tests=src/test/java \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
            -Dsonar.junit.reportPaths=target/surefire-reports

          # Analyse Frontend (Angular)
          cd ../front
          npm install
          npm test -- --coverage --testResultsProcessor=jest-junit
          sonar-scanner \
            -Dsonar.projectKey=romain-25_Gerez-un-projet-collaboratif-en-int-grant-une-demarche-CI-CD \
            -Dsonar.sources=src \
            -Dsonar.exclusions=**/*.spec.ts,**/*.test.ts \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
            -Dsonar.testExecutionReportPaths=test-report.xml

    - name: Generate SonarCloud report link
      run: |
        echo "https://sonarcloud.io/dashboard?id=romain-25_Gerez-un-projet-collaboratif-en-int-grant-une-demarche-CI-CD" > sonarcloud-report-link.txt
    - name: Upload SonarCloud report link
      uses: actions/upload-artifact@v3
      with:
        name: sonarcloud-report
        path: sonarcloud-report-link.txt

    - name: Build Frontend Docker Image
      run: |
       docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend:latest ./front
       docker push ${{ secrets.DOCKER_USERNAME }}/frontend:latest

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
    - name: Build Backend Docker Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:latest ./back
        docker push ${{ secrets.DOCKER_USERNAME }}/backend:latest

