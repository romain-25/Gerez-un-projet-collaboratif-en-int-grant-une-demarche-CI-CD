name: Analysis, Tests and Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  analysis:
    name: Analysis, Tests and Docker Image
    runs-on: ubuntu-latest

    steps:
      #Récupérer le code source
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      #Configuration du backend (Java)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      #Compilation et tests du backend
      - name: Build and Test Backend
        run: |
          cd back
          mvn clean verify

      #Analyse SonarQube du backend
      - name: Backend SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_BACK }}
          SONAR_HOST_URL: http://localhost:9000
        run: |
          cd back
          mvn sonar:sonar \
            -Dsonar.projectKey=bobapp-back \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
            -Dsonar.java.coveragePlugin=jacoco \
            -Dsonar.java.binaries=target/classes

      #Téléchargement du rapport de couverture backend
      - name: Upload Backend Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: backend-test-coverage
          path: ./back/target/site/jacoco/

      #Configuration du frontend (Angular)
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      #Installation des dépendances frontend
      - name: Install Dependencies for Frontend
        run: |
          cd front
          yarn install

      #Exécution des tests frontend avec couverture
      - name: Run Frontend Tests with Coverage
        run: |
          cd front
          npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage

      #Debugging : Vérification de la présence des fichiers de couverture frontend
      - name: Debug Frontend Coverage
        run: |
          ls -l front/coverage/bobapp

      #Téléchargement des fichiers de couverture frontend
      - name: Upload Frontend Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: frontend-test-coverage
          path: ./front/coverage/

      #Analyse SonarQube du frontend
      - name: Frontend SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_FRONT }}
          SONAR_HOST_URL: http://localhost:9000
        run: |
          cd front
          sonar-scanner \
            -Dsonar.projectKey=bobapp-front \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.sources=src \
            -Dsonar.exclusions=**/*.spec.ts,**/*.test.ts \
            -Dsonar.javascript.lcov.reportPaths=coverage/bobapp/lcov.info

      #Génération du lien vers SonarQube
      - name: Generate SonarQube Report Link
        run: |
          echo "http://localhost:9000/dashboard?id=bobapp-back" > sonar-back-link.txt
          echo "http://localhost:9000/dashboard?id=bobapp-front" > sonar-front-link.txt

      - name: Upload SonarQube Report Links
        uses: actions/upload-artifact@v3
        with:
          name: sonar-reports
          path: sonar-back-link.txt sonar-front-link.txt

      #Construction et déploiement Docker
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      #Construction et téléversement du backend
      - name: Build and Push Backend Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:latest ./back
          docker push ${{ secrets.DOCKER_USERNAME }}/backend:latest

      #Construction et téléversement du frontend
      - name: Build and Push Frontend Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend:latest ./front
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend:latest
